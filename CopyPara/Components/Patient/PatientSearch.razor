@using CopyPara.Application
@using CopyPara.Domain.Patients
@using MediatR
@inject ISender Sender
@rendermode InteractiveServer
@implements IDialogContentComponent<Patient>

<FluentDialogBody>
    <FluentTextField Label="Patient name" ValueChanged="Search" Immediate=true />

    <FluentDataGrid Items="patients.AsQueryable()">
        <PropertyColumn Title="Name" Property="@(p => p.Name)" />
        <TemplateColumn Title="Action" Align="@Align.End">
            <FluentButton OnClick="@(() => SelectPatient(context))">
                Select
            </FluentButton>
        </TemplateColumn>
    </FluentDataGrid>
</FluentDialogBody>

<FluentDialogFooter Visible="false" />

@code {
    private List<Patient> patients = new();

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public Patient Content { get; set; } = default!;

    private async Task Search(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            this.patients.Clear();

            return;
        }

        var patients =  await Sender.Send(new PatientByNameRequest(value));

        this.patients.Clear();

        await foreach(var patient in patients)
        {
            this.patients.Add(patient);
        }
    }


    private async Task SelectPatient(Patient patient)
    {
        if (patient is null) {
            Console.WriteLine("Krumpli21");
        }

        await Dialog.CloseAsync(patient);
    }
}
