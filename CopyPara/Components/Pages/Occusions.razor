@page "/treatment/appoint"
@using CopyPara.Application.Treatment.Read
@using CopyPara.Domain.Occasions
@using Microsoft.AspNetCore.Authorization
@* To get access to all Fluent UI System icons, install the Microsoft.FluentUI.AspNetCore.Compoents.Icon package *@
@* See all the diffeent ways on how to use icons at https://www.fluentui-blazor.net/Icon *@
@rendermode InteractiveServer
@attribute [Authorize]

@inject ISender sender
<FluentCalendar @bind-Value="@SelectedDate" />
<p>Selected date @(SelectedDate?.ToString("yyyy-MM-dd"))</p>

<FluentDataGrid Items="@items">
    <PropertyColumn Property="@(p => p.Treatment.Patient.Name)" Sortable="true" />
    <PropertyColumn Property="@(p => GetTime(p))"  Sortable="true" />
    <PropertyColumn Property="@(p => p.Machine.Name)" Sortable="true" />
</FluentDataGrid>

@code
{
    private DateTime? _selectedDate = null;
    private DateTime? SelectedDate
    {
        get
        {
            return _selectedDate;
        }

        set
        {
            _selectedDate = value;
            OnInitializedAsync();

        }
    }
    IQueryable<Domain.Occasions.Occasion> items;

    private bool DisabledDate(DateTime date)
    {
        return (date.DayOfWeek == DayOfWeek.Sunday || date.DayOfWeek == DayOfWeek.Saturday);
    }

    protected override async Task OnInitializedAsync()
    {
        items = GetTreatments().SelectMany(x => x.Occasions).Where(x => x.Date == SelectedDate).AsQueryable();
    }
    private Domain.Treatments.Treatment[] GetTreatments()
    {
        var t = sender.Send(new ReadTreatmentRequest());
        return t.Result;
    }
    private DateTime GetTime(Occasion o)
    {
        var result = o.Date;
        result = result.AddSeconds(480 + o.TimeSlot.StartTime);
        return result;
    }
}